Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectiveParser = void 0;
const compiler_1 = require("@angular/compiler");
const translation_collection_1 = require("../utils/translation.collection");
const utils_1 = require("../utils/utils");
const TRANSLATE_ATTR_NAME = 'translate';
class DirectiveParser {
    extract(source, filePath) {
        let collection = new translation_collection_1.TranslationCollection();
        if (filePath && utils_1.isPathAngularComponent(filePath)) {
            source = utils_1.extractComponentInlineTemplate(source);
        }
        const nodes = this.parseTemplate(source, filePath);
        const elements = this.getElementsWithTranslateAttribute(nodes);
        elements.forEach((element) => {
            const attr = this.getAttribute(element, TRANSLATE_ATTR_NAME);
            if (attr) {
                collection = collection.add(attr);
                return;
            }
            const textNodes = this.getTextNodes(element);
            textNodes.forEach((textNode) => {
                collection = collection.add(textNode.value.trim());
            });
        });
        return collection;
    }
    getElementsWithTranslateAttribute(nodes) {
        let elements = [];
        nodes.filter(this.isElementLike)
            .forEach((element) => {
            if (this.hasAttribute(element, TRANSLATE_ATTR_NAME)) {
                elements = [...elements, element];
            }
            const childElements = this.getElementsWithTranslateAttribute(element.children);
            if (childElements.length) {
                elements = [...elements, ...childElements];
            }
        });
        return elements;
    }
    getTextNodes(element) {
        return element.children.filter(this.isText);
    }
    hasAttribute(element, name) {
        return this.getAttribute(element, name) !== undefined;
    }
    getAttribute(element, name) {
        var _a;
        return (_a = element.attributes.find((attribute) => attribute.name === name)) === null || _a === void 0 ? void 0 : _a.value;
    }
    isElementLike(node) {
        return node instanceof compiler_1.TmplAstElement || node instanceof compiler_1.TmplAstTemplate;
    }
    isText(node) {
        return node instanceof compiler_1.TmplAstText;
    }
    parseTemplate(template, path) {
        return compiler_1.parseTemplate(template, path).nodes;
    }
}
exports.DirectiveParser = DirectiveParser;
//# sourceMappingURL=directive.parser.js.map